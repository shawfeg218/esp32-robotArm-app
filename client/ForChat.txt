// file: esp32-robotArm-app/client/App.js

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Home from './components/Home';
import Quiz from './components/Quiz';
import './CSS/App.css';
import ArmControlContainer from './components/ArmControlContainer';

function App() {
	return (
		<Router>
			<Routes>
				<Route path="/" element={<Home />} />
				<Route path="/quiz" element={<Quiz />} />
				<Route path="/arm-control" element={<ArmControlContainer />} />
			</Routes>
		</Router>
	);
}

export default App;




// file: esp32-robotArm-app/client/src/components/Home.js

import { useNavigate } from 'react-router-dom';

function Home() {
	const navigate = useNavigate();

	return (
		<div>
			<h1>Welcome to my web app!</h1>
			<button
				onClick={() => {
					navigate('/quiz');
				}}
			>
				Quiz
			</button>
			<button
				onClick={() => {
					navigate('/arm-control');
				}}
			>
				操作手臂
			</button>
		</div>
	);
}

export default Home;


// file: esp32-robotArm-app/client/src/components/ArmControlContainer.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ArmControl from './ArmControl';

function ArmControlContainer() {
  const [targetAngles, setTargetAngles] = useState({
    A: 0,
    B: 0,
    C: 0,
    D: 0,
    E: 0,
    F: 0,
  });
  const [currentAngles, setCurrentAngles] = useState({
    A: 0,
    B: 0,
    C: 0,
    D: 0,
    E: 0,
    F: 0,
  });

  const handleChange = (axis, angle) => {
    const newAngles = { ...targetAngles, [axis]: angle };
    setTargetAngles(newAngles);

    axios.post('http://localhost:5000/api/set-axis-angle', { axis, angle });
  };

  const handleReset = () => {
    setTargetAngles({
      A: 0,
      B: 0,
      C: 0,
      D: 0,
      E: 0,
      F: 0,
    });

    axios.post('http://localhost:5000/api/reset-arm');
  };

  useEffect(() => {
    const interval = setInterval(() => {
      axios.get('http://localhost:5000/api/get-angles').then((res) => {
        setCurrentAngles(res.data);
      });
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  return (
    <ArmControl
      targetAngles={targetAngles}
      currentAngles={currentAngles}
      handleChange={handleChange}
      handleReset={handleReset}
    />
  );
}

export default ArmControlContainer;




// file: esp32-robotArm-app/client/src/components/ArmControl.js

import React from 'react';
import '../CSS/ArmControl.css';

export default function ArmControl(props) {
  const { targetAngles, currentAngles, handleChange, handleReset } = props;

  return (
    <div className="axis-container">
      <div>A軸角度：{targetAngles.A}°</div>
      <input
        type="range"
        min="0"
        max="180"
        value={targetAngles.A}
        onChange={(e) => handleChange('A', e.target.value)}
      />
      <div>B軸角度：{targetAngles.B}°</div>
      <input
        type="range"
        min="0"
        max="180"
        value={targetAngles.B}
        onChange={(e) => handleChange('B', e.target.value)}
      />
      <div>C軸角度：{targetAngles.C}°</div>
      <input
        type="range"
        min="0"
        max="180"
        value={targetAngles.C}
        onChange={(e) => handleChange('C', e.target.value)}
      />
      <div>D軸角度：{targetAngles.D}°</div>
      <input
        type="range"
        min="0"
        max="180"
        value={targetAngles.D}
        onChange={(e) => handleChange('D', e.target.value)}
      />
      <div>E軸角度：{targetAngles.E}°</div>
      <input
        type="range"
        min="0"
        max="180"
        value={targetAngles.E}
        onChange={(e) => handleChange('E', e.target.value)}
      />
      <div>F軸角度：{targetAngles.F}°</div>
      <input
        type="range"
        min="0"
        max="180"
        value={targetAngles.F}
        onChange={(e) => handleChange('F', e.target.value)}
      />

      <button className="reset-btn" onClick={handleReset}>
        返回初始狀態
      </button>
      <div className="current-state">
        <div>當前狀態:</div>
        <div>
          A軸-當前位置：{currentAngles.A}°；目標位置：{targetAngles.A}°
        </div>
        <div>
          B軸-當前位置：{currentAngles.B}°；目標位置：{targetAngles.B}°
        </div>
        <div>
          C軸-當前位置：{currentAngles.C}°；目標位置：{targetAngles.C}°
        </div>
        <div>
          D軸-當前位置：{currentAngles.D}°；目標位置：{targetAngles.D}°
        </div>
        <div>
          E軸-當前位置：{currentAngles.E}°；目標位置：{targetAngles.E}°
        </div>
        <div>
          F軸-當前位置：{currentAngles.F}°；目標位置：{targetAngles.F}°
        </div>
      </div>
    </div>
  );
}



// file: esp32-robotArm-app/client/src/CSS/ArmControl.css

.axis-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0 auto;
  max-width: 60%;
  background-color: #222;
  color: #fff;
  border: 2px solid #ccc;
  box-shadow: 0 0 10px #ccc;
  padding: 20px;
  border-radius: 5px;
}

.axis-container > div {
  margin-bottom: 10px;
  font-size: 18px;
}

.axis-container input[type='range'] {
  width: 100%;
}

.current-state {
  margin-top: 20px;
}

.current-state > div {
  margin-bottom: 10px;
  font-size: 18px;
}

.reset-btn {
  margin-top: 20px;
  padding: 10px 20px;
  background-color: #ccc;
  color: #222;
  border: none;
  box-shadow: 0 0 10px #ccc;
  border-radius: 5px;
  text-transform: uppercase;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease-in-out;
}

.reset-btn:hover {
  background-color: #999;
}





// file: esp32-robotArm-app/client/src/components/Quiz.js

import React, { useState } from 'react';
import Question from './Question';

function Quiz() {
	const [selectedSubject, setSelectedSubject] = useState('');

	const handleSelectSubject = (subject) => {
		setSelectedSubject(subject);
	};

	return (
		<div>
			<h2>Quiz</h2>
			<div>
				{selectedSubject ? null : (
					<>
						<button onClick={() => handleSelectSubject('Math')}>Math</button>
						<button onClick={() => handleSelectSubject('English')}>
							English
						</button>
					</>
				)}
			</div>
			{selectedSubject ? <Question subject={selectedSubject} /> : null}
		</div>
	);
}

export default Quiz;



// file: esp32-robotArm-app/client/src/components/Question.js
import React, { useState } from 'react';
import questions from '../data/questions';
import '../CSS/Question.css';

function Question({ subject }) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedOptionIndex, setSelectedOptionIndex] = useState(-1);
  const [isAnswered, setIsAnswered] = useState(false);
  const selectedQuestions = questions[subject];
  const currentQuestion = selectedQuestions[currentQuestionIndex];

  const handleOptionClick = (optionIndex) => {
    if (!isAnswered) {
      setSelectedOptionIndex(optionIndex);
      setIsAnswered(true);
    }
  };

  const handleNextClick = () => {
    if (currentQuestionIndex < selectedQuestions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setIsAnswered(false);
      setSelectedOptionIndex(-1);
    }
  };

  return (
    <div className="question-container">
      <div className="question-text">{currentQuestion.text}</div>
      <div className="options-container">
        {currentQuestion.options.map((option, index) => (
          <div
            key={option.id}
            className={`option ${isAnswered ? 'disabled' : ''} ${
              isAnswered && option.id === currentQuestion.correctOptionId
                ? 'correct'
                : isAnswered && index === selectedOptionIndex
                ? 'incorrect'
                : ''
            }`}
            onClick={() => handleOptionClick(index)}
          >
            {option.text}
          </div>
        ))}
      </div>
      {isAnswered && (
        <button className="next-button" onClick={handleNextClick}>
          {currentQuestionIndex === selectedQuestions.length - 1
            ? 'Finish'
            : 'Next'}
        </button>
      )}
    </div>
  );
}

export default Question;




// file: esp32-robotArm-app/client/src/CSS/Question.css

.question-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  max-height: 100vh;
  overflow: auto;
}

.question-text {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 10px;
}

.options-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
  max-width: 500px;
  width: 100%;
  overflow: auto;
}

.option {
  background-color: #f0f0f0;
  border: none;
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 20px;
  font-size: 16px;
  font-weight: bold;
  max-width: 50%;
  width: 100%;
  text-align: center;
  cursor: pointer;
  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  transition: all 0.3s ease-in-out;
}

.option:hover {
  background-color: #e0e0e0;
  transform: translateY(-5px);
}

.option.disabled {
  cursor: not-allowed;
}

.disabled.correct {
  background-color: #d8e8c2;
}

.disabled.incorrect {
  background-color: #f8c2c2;
}

.next-button {
  margin-top: 20px;
  padding: 10px 20px;
  border: none;
  border-radius: 10px;
  font-size: 16px;
  font-weight: bold;
  background-color: #3f51b5;
  color: white;
  cursor: pointer;
  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  transition: all 0.3s ease-in-out;
}

.next-button:hover {
  background-color: #2c3e50;
  transform: translateY(-5px);
}

@media only screen and (min-width: 320px) {
  .options-container {
    max-width: 90%;
  }
  .option {
    max-width: 80%;
  }
}

@media only screen and (min-width: 375px) {
  .options-container {
    max-width: 80%;
  }
}

@media only screen and (min-width: 768px) {
  .options-container {
    max-width: 70%;
  }
}

@media only screen and (min-width: 1024px) {
  .options-container {
    max-width: 50%;
  }
}




// file: esp32-robotArm-app/client/src/data/questions.js
const questions = {
	Math: [
		{
			id: 1,
			text: 'What is 2 + 2?',
			options: [
				{ id: 1, text: '1' },
				{ id: 2, text: '2' },
				{ id: 3, text: '3' },
				{ id: 4, text: '4' },
			],
			correctOptionId: 4,
		},
		{
			id: 2,
			text: 'What is 3 x 3?',
			options: [
				{ id: 1, text: '6' },
				{ id: 2, text: '7' },
				{ id: 3, text: '8' },
				{ id: 4, text: '9' },
			],
			correctOptionId: 4,
		},
	],
	English: [
		{
			id: 1,
			text: 'What is the opposite of "hot"?',
			options: [
				{ id: 1, text: 'cold' },
				{ id: 2, text: 'warm' },
				{ id: 3, text: 'cool' },
				{ id: 4, text: 'chilly' },
			],
			correctOptionId: 1,
		},
		{
			id: 2,
			text: 'What is the past tense of "go"?',
			options: [
				{ id: 1, text: 'gone' },
				{ id: 2, text: 'went' },
				{ id: 3, text: 'goed' },
				{ id: 4, text: 'goed' },
			],
			correctOptionId: 2,
		},
	],
};

export default questions;


// file: esp32-robotArm-app/server/index.js
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const dotenv = require('dotenv');
const axios = require('axios');
const path = require('path');

dotenv.config({ path: path.resolve(__dirname, '../.env') });

console.log(`ESP32 IP: ${process.env.ESP32_IP}`);
console.log(`ESP32 Port: ${process.env.ESP32_PORT}`);

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(cors());

const esp32Ip = process.env.ESP32_IP;
const esp32Port = process.env.ESP32_PORT;

// 创建 API 路由
const apiRouter = express.Router();
app.use('/api', apiRouter);

// 设置各轴的角度
app.post('/api/set-axis-angle', (req, res) => {
  const { axis, angle } = req.body;
  axios
    .post(
      `http://${esp32Ip}:${esp32Port}/set-axis-angle?axis=${axis}&angle=${angle}`
    )
    .then((response) => {
      res.send(response.data);
    })
    .catch((error) => {
      console.log(error);
      res.status(500).send({ error: 'Failed to set angle' });
    });
});

// 获取各轴的角度
app.get('/api/get-angles', (req, res) => {
  axios
    .get(`http://${esp32Ip}:${esp32Port}/get-angles`)
    .then((response) => {
      res.send(response.data);
    })
    .catch((error) => {
      console.log(error);
      res
        .status(500)
        .send({ error: 'Failed to get angles', message: error.message });
    });
});

// 重置机械手臂
app.post('/api/reset-arm', (req, res) => {
  axios
    .post(`http://${esp32Ip}:${esp32Port}/reset-arm`)
    .then((response) => {
      res.send(response.data);
    })
    .catch((error) => {
      console.log(error);
      res.status(500).send({ error: 'Failed to reset arm' });
    });
});

// 启动 Express 服务器
const port = process.env.PORT || 5000;
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});



// file: esp32-robotArm-app/esp32-arm/esp32-arm.ino
#include <WiFi.h>
#include <WebServer.h>
#include <ESP32Servo.h>

const char* ssid = "108-3-1"; // WiFi熱點名稱
const char* password = "0987352372"; // WiFi密碼
WebServer server(80); // 創建Web Server

Servo servoA, servoB, servoC, servoD, servoE, servoF; 

// 初始化角度
int angleA = 0; 
int angleB = 0; 
int angleC = 0; 
int angleD = 0; 
int angleE = 0; 
int angleF = 0; 

void setup() {
  Serial.begin(115200); // 开启串口调试
  WiFi.begin(ssid, password); // 连接WiFi
  while (WiFi.status() != WL_CONNECTED) { // 等待连接
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // 处理/set-axis-angle路由的POST请求
  server.on("/set-axis-angle", HTTP_POST, []() {
    String axis = server.arg("axis"); // 获取轴的编号
    int angle = server.arg("angle").toInt(); // 获取目标角度
    if (axis == "A") { // 如果是A轴
      angleA = angle; // 更新A轴的角度
      servoA.write(angleA); // 将A轴的舵机转动到目标角度
    } else if (axis == "B") { // 如果是B轴
      angleB = angle; // 更新B轴的角度
      servoB.write(angleB); // 将B轴的舵机转动到目标角度
    } else if (axis == "C") { // 如果是C轴
      angleC = angle; // 更新C轴的角度
      servoC.write(angleC); // 将C轴的舵机转动到目标角度
    } else if (axis == "D") { // 如果是D轴
      angleD = angle; // 更新D轴的角度
      servoD.write(angleD); // 将D轴的舵机转动到目标角度
    } else if (axis == "E") { // 如果是E轴
      angleE = angle; // 更新E轴的角度
      servoE.write(angleE); // 将E轴的舵机转动到目标角度
    } else if (axis == "F") { // 如果是F轴
      angleF = angle; // 更新F轴的角度
      servoF.write(angleF); // 将F轴的舵机转动到目标角度
    }
    server.send(200); // 发送响应码200，表示请求已被成功处理
  });

  // 處理/reset-arm路由的POST請求
  server.on("/reset-arm", HTTP_POST, []() {

    angleA = angleB = angleC = angleD =  angleE = angleF = 0;

    servoA.write(angleA);
    servoB.write(angleB);
    servoC.write(angleC);
    servoD.write(angleD);
    servoE.write(angleE);
    servoF.write(angleF);
    
    server.send(200);
    Serial.println("Servos reseted");
  });

  // 处理/get-angles路由的GET请求
  server.on("/get-angles", HTTP_GET, []() {
    String response = "{\"A\":" + String(angleA) +
                      ",\"B\":" + String(angleB) +
                      ",\"C\":" + String(angleC) +
                      ",\"D\":" + String(angleD) +
                      ",\"E\":" + String(angleE) +
                      ",\"F\":" + String(angleF) + "}";
    server.send(200, "application/json", response); // 发送包含角度信息的JSON响应
  });

  server.begin(); // 启动Web服务器
  Serial.println("Web server started");

  // 为每个舵机对象分配控制板上的GPIO引脚号
  servoA.attach(32);
  servoB.attach(33);
  servoC.attach(25);
  servoD.attach(26);
  servoE.attach(27);
  servoF.attach(14);

  // 将六个舵机初始化为0度
  servoA.write(angleA);
  servoB.write(angleB);
  servoC.write(angleC);
  servoD.write(angleD);
  servoE.write(angleE);
  servoF.write(angleF);

  Serial.println("Servos attached and initialized");
}

void loop() {
  server.handleClient(); // 处理客户端请求
  delay(10); // 延迟10毫秒，避免过多的CPU占用
}




// file: esp32-robotArm-app/.env
ESP32_IP=192.168.0.12  
ESP32_PORT=80
