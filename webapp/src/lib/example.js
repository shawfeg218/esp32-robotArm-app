export const example = {
  transcription:
    "1\n00:00:00,000 --> 00:00:06,660\nSST, an open source tool that actually makes it fun to build full stack web applications with AWS.\n\n2\n00:00:06,660 --> 00:00:10,620\nThe problem with Amazon Web Services is that it has too many web services,\n\n3\n00:00:10,620 --> 00:00:14,200\nand putting them all together in a unified package can be extremely complicated.\n\n4\n00:00:14,200 --> 00:00:19,700\nSST fixes this for web developers by representing backend infrastructure as code, TypeScript code,\n\n5\n00:00:19,700 --> 00:00:25,140\nmaking it possible to integrate features like S3 storage buckets, Lambda functions with API gateway,\n\n6\n00:00:25,140 --> 00:00:30,460\ndatabases like RDS and DynamoDB, Cognito user authentication, along with many other features,\n\n7\n00:00:30,460 --> 00:00:37,500\nwithout ever touching the AWS console, and it has built-in deployment support for frameworks like Next.js, Astro, and SvelteKit.\n\n8\n00:00:37,500 --> 00:00:42,700\nOnce initialized, it provides a variety of simple constructs that represent infrastructure declaratively.\n\n9\n00:00:42,700 --> 00:00:47,000\nUnder the hood, this code is based on Amazon's Cloud Development Kit and CloudFormation.\n\n10\n00:00:47,000 --> 00:00:52,640\nThese constructs are grouped together in stacks, which can be deployed together or run locally with the SST dev command.\n\n11\n00:00:52,640 --> 00:00:55,600\nIt provides a local development environment with live reloading,\n\n12\n00:00:55,600 --> 00:01:00,140\nand provides a web-based console to manage your stack, minus the typical AWS pain points.\n\n13\n00:01:00,140 --> 00:01:03,900\nTo get started, you'll need the AWS CLI with credentials set up locally.\n\n14\n00:01:03,900 --> 00:01:09,300\nNext, run the npx create sst command to drop in a deployment solution to your favorite framework,\n\n15\n00:01:09,300 --> 00:01:11,540\nor initialize it as a standalone project.\n\n16\n00:01:11,540 --> 00:01:16,560\nThis will scaffold a monorepo, and the packages directory is where you write the code to power the backend.\n\n17\n00:01:16,560 --> 00:01:23,240\nInside here, we can write serverless functions in TypeScript that are powered by AWS Lambda and use API Gateway as the front door.\n\n18\n00:01:23,240 --> 00:01:28,200\nTo see it in action, run the dev command, and that will automatically deploy the required resources to the cloud,\n\n19\n00:01:28,200 --> 00:01:30,400\nas we can see here on the AWS console.\n\n20\n00:01:30,400 --> 00:01:33,440\nWhat's really cool, though, is that we now have a local development environment,\n\n21\n00:01:33,440 --> 00:01:36,960\nand if we go and change the code in the function, it's immediately reflected in the cloud.\n\n22\n00:01:36,960 --> 00:01:41,940\nIn addition, it spins up the local SST console, where you can view logs and manager stacks.\n\n23\n00:01:41,940 --> 00:01:44,640\nA stack is where you define your infrastructure as code.\n\n24\n00:01:44,640 --> 00:01:49,200\nIn the stack's directory, we have an API that can map URLs to Lambda functions.\n\n25\n00:01:49,200 --> 00:01:52,240\nPretty simple, but we can expand on this by adding an event bus,\n\n26\n00:01:52,240 --> 00:01:56,240\nwhich is able to trigger Lambda functions based on different events that happen in the background,\n\n27\n00:01:56,240 --> 00:01:58,240\nlike when a new database record is created.\n\n28\n00:01:58,240 --> 00:02:01,940\nFrom there, we can enable file uploads by adding the bucket construct to the stack.\n\n29\n00:02:01,940 --> 00:02:05,060\nWhile we're at it, we might add a Postgres database with RDS,\n\n30\n00:02:05,060 --> 00:02:07,940\nand add the auth construct to enable user authentication.\n\n31\n00:02:07,940 --> 00:02:12,700\nAnd we can even define cron jobs here that run on a schedule and point to a specific Lambda function.\n\n32\n00:02:12,700 --> 00:02:16,560\nAnd finally, when the stack is complete, we can add it to the SST config file,\n\n33\n00:02:16,560 --> 00:02:18,840\nthen deploy it to the cloud with a single command.\n\n34\n00:02:18,840 --> 00:02:21,140\nThis has been SST in 100 seconds.\n\n35\n00:02:21,140 --> 00:02:45,140\nThanks for watching, and I will see you in the next one.\n\n\n",
  translation:
    '1\nSST，一個開源工具，讓使用AWS建立全端網站應用程式變得有趣。\n\n2\nAmazon Web Services的問題在於它有太多網路服務，\n\n3\n並且將它們統一打包在一起可能非常複雜。\n\n4\nSST透過將後端基礎架構表示為程式碼（TypeScript程式碼），解決了這個問題，\n\n5\n這樣就可以整合S3儲存桶、Lambda函式與API Gateway等功能，\n\n6\n還有像RDS和DynamoDB這樣的資料庫，Cognito使用者認證等多種功能，\n\n7\n而不需要接觸AWS控制台，並且它還內建了對Next.js、Astro和SvelteKit等框架的部署支援。\n\n8\n一旦初始化完成，它提供了各種簡單的結構，代表基礎架構聲明式地。\n\n9\n在背後，這段程式碼是基於Amazon的Cloud Development Kit和CloudFormation。\n\n10\n這些結構被分組在堆疊中，可以一起部署或使用SST dev命令在本地運行。\n\n11\n它提供了具有即時重新加載功能的本地開發環境，\n\n12\n並提供了一個基於Web的控制台來管理您的堆疊，省去了典型的AWS問題。\n\n13\n要開始使用，您需要在本機設定好AWS CLI和憑證。\n\n14\n接下來，運行npx create sst命令將部署解決方案加入到您喜歡的框架中，\n\n15\n或者將其初始化為獨立專案。\n\n16\n這將建立一個Monorepo，而packages目錄是您撰寫後端代碼的地方。\n\n17\n在這裡，我們可以使用TypeScript編寫由AWS Lambda驅動並使用API Gateway作為前端的無伺服器函式。\n\n18\n執行dev命令來查看其運作情況，這將自動部署所需的資源到雲端，\n\n19\n我們可以在AWS控制台上看到這一點。\n\n20\n真正酷的地方是，我們現在擁有了本地開發環境，\n\n21\n如果我們在函式中修改代碼，它會立即反映在雲端。\n\n22\n此外，它還會啟動本地SST控制台，您可以在其中查看日誌並管理堆疊。\n\n23\n堆疊是您將基礎架構定義為程式碼的地方。\n\n24\n在堆疊的目錄中，我們有一個API可以將URL映射到Lambda函式。\n\n25\n非常簡單，但我們可以通過添加事件匯流排來擴展這一點，\n\n26\n該匯流排能夠根據後台發生的不同事件觸發Lambda函式，\n\n27\n例如在創建新的資料庫紀錄時。\n\n28\n在那之後，我們可以通過將bucket結構添加到堆疊中來啟用文件上傳。\n\n29\n在我們這樣做的同時，可以使用RDS添加一個Postgres資料庫，\n\n30\n並使用auth結構啟用使用者認證。\n\n31\n我們甚至可以在這裡定義定時任務，這些任務可以按照一個時間表運行並指向特定的Lambda函式。\n\n32\n最後，當堆疊完成後，我們可以將其添加到SST配置文件中，\n\n33\n然後通過單個命令將其部署到雲端。\n\n34\n這就是SST一百秒。\n\n35\n感謝觀看，下一集再見。\n\n\n',
};
